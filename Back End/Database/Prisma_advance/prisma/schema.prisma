generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// each model is actually a table in a db
model User {
  id       Int      @id @default(autoincrement())
  // for mongo:   id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String   @unique
  email    String   @unique
  password String
  profile  Profile? //just for reference used by prisma in actual table profile wont be displyed (1-1)
  posts    Posts[] //just for reference used by prisma in actual table post wont be displyed (1-m)
}

// One to One with User ie a user can have one profile & vicer-versa.
model Profile {
  id      Int    @id @default(autoincrement())
  name    String
  gender  String
  age     String
  user_id Int    @unique // a forgein key field
  user    User   @relation(fields: [user_id], references: [id]) // just for reference used by prisma in actual table user wont be displyed
  // summing up userid will be referencing id of User Model through prisma references such as profile in user model and user in profile model.
}

// one to many with User ie a user can have multiple posts and multiple post can have one user
model Posts {
  id      Int       @id @default(autoincrement())
  title   String
  content String
  user_id Int // a foreign key field
  user    User      @relation(fields: [user_id], references: [id]) // just for reference used by prisma in actual table user wont be displyed
  // summing up userid will be referencing id of User Model through prisma references such as posts in user model and user in Posts model.
  // (IMPLICIT)
  // posts   Posts[] 
  //  (EXPLICIT)
  tags    PostTag[]
}

// Posts and Tags share implicit many-to-mny relationship ie prisma handles the Intermediary table for us
model Tags {
  id    Int       @id @default(autoincrement())
  type  String
  // (IMPLICIT)
  // posts   Posts[] 
  //  (EXPLICIT)
  posts PostTag[]
}

// _____________________________________________________
//  Posts and Tags share EXPLICIT many-to-mny relationship THROUGH our custom made Intermediary table ie POSTTAG

model PostTag {
  post_id Int
  tag_id  Int
  post    Posts @relation(fields: [post_id], references: [id])
  tag     Tags  @relation(fields: [tag_id], references: [id])

  @@id([post_id, tag_id])
}

// for users to login to the api (EXTRA U CAN IGNORE)
model Api_users {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}
